"""
Formül:
d = √(x₂-x₁)²+(y₂-y₁)²

Öklid mesafesi, Öklid uzayındaki iki nokta arasındaki "sıradan" düz 
çizgi mesafesidir. Bu formül ile, düzlemde veya üç boyutlu uzayda 
iki nokta arasındaki mesafeyi bulabilirsiniz.

Göreviniz:

Python'da fonksiyonlar ve döngüler kavramlarını kullanarak, aşağıdaki 
işlemleri gerçekleştiren bir program yazmanız gerekmektedir:

Noktaların Tanımlanması:

‘points’ adında bir liste oluşturun. Bu liste, 2D uzaydaki noktaları 
temsil eden demetler (tuple) içermelidir. Örneğin, ‘(x, y)’ noktası 
bir demet ‘(x, y)’ olarak temsil edilecektir.

Öklid Mesafesi İçin Bir Fonksiyon Yazma:

‘euclideanDistance’ adında bir fonksiyon tanımlayın. Bu fonksiyon, iki 
demet (her biri bir noktayı temsil eder) almalı ve bu iki nokta 
arasındaki Öklid mesafesini döndürmelidir.

Mesafelerin Hesaplanması:

Bir döngü kullanarak, ‘points’ listesindeki her nokta çifti arasındaki 
Öklid mesafesini hesaplayın. Bu mesafeleri ‘distances’ adında başka bir 
listede saklayın.

Minimum Mesafenin Bulunması:

‘distances’ listesinden minimum mesafeyi bulun ve yazdırın.
"""


import math

pointList = [((1,1), (5,4)),((1,1),(13,6))]

def euclideanDistance(x1Coordinate, x2Coordinate, y1Coordinate, y2Coordinate):
    #result = math.sqrt(((x2Coordinate - x1Coordinate)**2) + ((y2Coordinate - y1Coordinate)**2))
    result = ((((x2Coordinate - x1Coordinate)**2) + ((y2Coordinate - y1Coordinate)**2)))**(1/2)

    return result


distance = []
baslangicDeğeri = 0
while(baslangicDeğeri < len(pointList)):
    x1Point = pointList[durum][0][0]
    y1Point = pointList[durum][0][1]
    x2Point = pointList[durum][1][0]
    y2Point = pointList[durum][1][1]
    
    distance.append(euclideanDistance(x1Point, x2Point, y1Point, y2Point))
    baslangicDeğeri +=1

    
    

for x in distance:
    print(str(x))

print("\nMinumum Value: "+ str(min(distance)))
